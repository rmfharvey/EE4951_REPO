/* ###################################################################
**     Filename    : Events.c
**     Project     : ee4951_prodmcu
**     Processor   : MK22FN512VLL12
**     Component   : Events
**     Version     : Driver 01.00
**     Compiler    : GNU C Compiler
**     Date/Time   : 2015-11-28, 12:40, # CodeGen: 0
**     Abstract    :
**         This is user's event module.
**         Put your event handler code here.
**     Settings    :
**     Contents    :
**         No public methods
**
** ###################################################################*/
/*!
** @file Events.c
** @version 01.00
** @brief
**         This is user's event module.
**         Put your event handler code here.
*/         
/*!
**  @addtogroup Events_module Events module documentation
**  @{
*/         
/* MODULE Events */

#include "Cpu.h"
#include "Events.h"
#include "DutISense.h"
#include "DutVSense.h"
#include "floatUnion.h"

#ifdef __cplusplus
extern "C" {
#endif


/* User includes (#include below this line is not maintained by Processor Expert) */

/*
** ===================================================================
**     Interrupt handler : ADC0_IRQHandler
**
**     Description :
**         User interrupt service routine. 
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/
void ADC0_IRQHandler(void)
{
  /* Write your code here ... */
}

/*
** ===================================================================
**     Callback    : PORTA_IRQHandler
**
**     Description :
**         User interrupt service routine.
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/
void PORTA_IRQHandler(void)	{
	//PRINTF("PORTA Interrupt\n\r");
}


/*
** ===================================================================
**     Callback    : adc_trigger_OnTimeOut
**     Description : This callback is called when the timer expires.
**     Parameters  :
**       data - User parameter for the callback function.
**     Returns : Nothing
** ===================================================================
*/
#define PACKETSIZE	512
void adc_trigger_OnTimeOut(void* data)
{
	static uint32_t timestamp;
	static uint16_t count=0;
	extern DutISense dutIsense;
	extern DutVSense dutVsense;
	static uint8_t buffer1[512] = {0};
	static uint8_t buffer2[512] = {0};
	static uint8_t packet[13] =  {0x00};
	uint8_t i;
	uint8_t checkSum=0;
	uint8_t twosCompCS=0;

	if(count&0b1)	{
		dutVsense.updateADCVal();

		floatUnion_t voltage = dutVsense.getADCValScaled();
		floatUnion_t current = 1000*dutIsense.getADCValScaled();  // in mA
		PRINTF("%02d.%03dV, %04d.%04dmA",
				(uint16_t)voltage.asFloat,
				(uint16_t)((voltage.asFloat-(uint8_t)voltage.asFloat)*1000),
				(uint16_t)current.asFloat,
				(uint16_t)((current.asFloat-(uint8_t)current.asFloat)*10000);
		/*timestamp = PIT_DRV_ReadTimerCount(ts_clock_IDX, 0U);
		packet[0] = voltage.asIntBF.n0;
		packet[1] = voltage.asIntBF.n1;
		packet[2] = voltage.asIntBF.n2;
		packet[3] = voltage.asIntBF.n3;
		packet[4] = current.asIntBF.n0;
		packet[5] = current.asIntBF.n1;
		packet[6] = current.asIntBF.n2;
		packet[7] = current.asIntBF.n3;
		packet[8] = timestamp&0x000F;
		packet[9] = (timestamp>>8)&0x000F;
		packet[10] = (timestamp>>16)&0x000F;
		for(i=0; i<10; i++)	{
			checkSum = checkSum^packet[i];
			twosCompCS += packet[i];
		}
		packet[11] = checkSum;
		packet[12] = (~twosCompCS)+1;

		for(i=0; i<13; i++)
			UART_HAL_Putchar(UART1_BASE_PTR, packet[i]);*/
	}
	else
		dutIsense.updateADCVal();
	if(!count++)
		PRINTF("I: %05d\tV: %05d\r", dutIsense.getADCValRaw(), dutVsense.getADCValRaw());
}

/*
** ===================================================================
**     Interrupt handler : ADC1_IRQHandler
**
**     Description :
**         User interrupt service routine. 
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/
void ADC1_IRQHandler(void)
{
  /* Write your code here ... */
}




#ifdef ts_clock_IDX
/*
** ===================================================================
**     Interrupt handler : PIT1_IRQHandler
**
**     Description :
**         User interrupt service routine. 
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/
void PIT1_IRQHandler(void)
{
  /* Clear interrupt flag.*/
  PIT_HAL_ClearIntFlag(g_pitBase[ts_clock_IDX], ts_clock_CHANNEL);
  /* Write your code here ... */
}
#else
  /* This IRQ handler is not used by ts_clock component. The purpose may be
   * that the component has been removed or disabled. It is recommended to 
   * remove this handler because Processor Expert cannot modify it according to 
   * possible new request (e.g. in case that another component uses this
   * interrupt vector). */
  #warning This IRQ handler is not used by ts_clock component.\
           It is recommended to remove this because Processor Expert cannot\
           modify it according to possible new request.
#endif

/* END Events */

#ifdef __cplusplus
}  /* extern "C" */
#endif

/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.5 [05.21]
**     for the Freescale Kinetis series of microcontrollers.
**
** ###################################################################
*/
