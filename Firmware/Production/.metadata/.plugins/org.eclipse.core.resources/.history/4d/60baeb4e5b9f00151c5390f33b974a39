/*
 * DutISense.h
 *
 *  Created on: Nov 28, 2015
 *      Author: RossHarvey
 */

#ifndef SOURCES_DUTISENSE_H_
#define SOURCES_DUTISENSE_H_

#include <assert.h>
#include <stdint.h>
#include "dut_gpio.h"
#include "dut_adc.h"

#define NUMRANGES		4U
#define ADC_CHNGROUP	0U
#define AUTOSWITCHING
#define RNGSWITCHHYS	3U

#define A_LOTHRESH	33		// 5mA
#define mA_HITHRESH 45875	// 70mA
#define mA_LOTHRESH	82		// 500uA
#define uA_HITHRESH	45875	// 700uA
#define uA_LOTHRESH	33		// 500nA	66		// 1uA
#define nA_HITHRESH	45875	//		16384	// 100uA

#ifndef	floatUnion_t
typedef union	FLOAT_UNION	{
	float	asFloat;
	uint32_t asInt;
}floatUnion_t;
#endif

typedef enum IRANGE	{
	nA = 0,
	uA,
	mA,
	A
}iRange_t;

/****************************************************************************************************
 * This struct holds all values relevant to the individual current ranges in the project			*
 * The raw and scaled ADC values will probably never be used here/ but I've included them 			*
 * 		just in case we want to.																	*
 ****************************************************************************************************/
typedef struct CURRENT_RANGE	{
	uint32_t 			enPinName;			// Enable pin for each current range
	adc16_chn_config_t	adcChConfig;		// ADC channel configuration
	volatile uint16_t 	rawADCVal;			// 16-bit, unsigned fractional ADC value
	float				scaledADCVal;		// ADC Val scaled by reference voltage (Value in amps)
	float				shuntRes;			// Current shunt resistance value
	uint8_t				ampGain;			// Shunt amplifier gain
	float				scalingFactor;		// Scaling factor
	uint8_t				rangeNum;			// Range number for switches
}currentRange_t;


/****************************************************************************************************
 * This class should handle all DUT I-sense related calls											*
 ****************************************************************************************************/
class DutISense {
public:
	DutISense();								// Constructor auto-initializes all DUT Isense channels
	void enableCurrentRange(iRange_t range);	// Sets which range is active
	void disableCurrentRange(void);				// Disables all Current Ranges
	uint8_t getCurrentRange(void);				// Returns the active range as an unsigned int in [0,3]
	void updateADCVal(void);					// Reads a new ADC value and updates rawADCVal and floatADCVal
	uint16_t getADCValRaw(void);				// Returns raw ADC value
	floatUnion_t getADCValScaled(void);			// Returns scaled ADC value in volts
private:
	uint8_t numCurrentRanges;
	uint16_t rawADCVal;
	floatUnion_t floatADCVal;
	currentRange_t range0;
	currentRange_t range1;
	currentRange_t range2;
	currentRange_t range3;
	currentRange_t *activeRange;			// Pointer to whichever range is currently active
	adc16_chn_config_t *activeADCChannel;	// Pointer to whichever ADC channel is currently active

	void PRV_initCurrentRange(currentRange_t *cRange, uint32_t pinName, adc16_chn_config_t adcCfg, float shRes, uint8_t gain, uint8_t rngNum);
	void PRV_enableRange(currentRange_t *newRange);
};

#endif /* SOURCES_DUTISENSE_H_ */
