/*
 * DutISense.cpp
 *
 *  Created on: Nov 28, 2015
 *      Author: RossHarvey
 */

#include <DutISense.h>


DutISense::DutISense() {
	numCurrentRanges = NUMRANGES;

	/* 	Auto-initialize current ranges	*/
	PRV_initCurrentRange(&range0, range0_p, dut_isense0, 0.01, 25, 0);
	PRV_initCurrentRange(&range1, range1_p, dut_isense1, 1.0, 25, 1);
	PRV_initCurrentRange(&range2, range2_p, dut_isense2, 100.0, 25, 2);
	PRV_initCurrentRange(&range3, range3_p, dut_isense3, 1000.0, 25, 3);
	range0.scalingFactor *= 0.000009759;	// Corrective factors, determined empirically
	range1.scalingFactor *= 0.010064;		// Corrective factors, determined empirically
	range2.scalingFactor *= 100;			// Corrective factors, determined empirically
	range3.scalingFactor *= 100000;			// Corrective factors, determined empirically

	activeRange = &range2;
	PRV_enableRange(&range3);
}


/********************************************************************************************************************************
 * enableCurrentRange(iRange_t range)																							*
 * Parameters: 	range - the range that you want to switch to																	*
  * Returns: nothing																											*
 *																																*
 * User callable function to switch current range manually.  Same thing as PRV_enableRange() except this accepts an iRange_t 	*
 * 	argument for code readability.  Class functions use PRV_enableRange() since this is a little slower.						*
 ********************************************************************************************************************************/
void DutISense::enableCurrentRange(iRange_t range)	{
	assert(range<NUMRANGES);
	switch(range)	{
		case 0:		// 40.3nA - 100uA
			PRV_enableRange(&range0);
			break;
		case 1:		// 403nA - 1mA
			PRV_enableRange(&range1);
			break;
		case 2:		// 40.3uA - 100mA
			PRV_enableRange(&range2);
			break;
		case 3:		// 4mA - 10A
			PRV_enableRange(&range3);
			break;
		default:
			break;
	}
}


/********************************************************************************************************************************
 * disableCurrentRange()																										*
 * Parameters: 	none																											*
 * Returns: nothing																												*
 *																																*
 * User callable function to switch off active current range.  Not used, but included for completeness.							*
 ********************************************************************************************************************************/
void DutISense::disableCurrentRange(void)	{
	GPIO_DRV_ClearPinOutput(activeRange->enPinName);
}


/********************************************************************************************************************************
 * getCurrentRange()																											*
 * Parameters: 	none																											*
 * Returns: which current range is currently active.  Could be easily switched to an iRange_t return value.						*
 ********************************************************************************************************************************/
uint8_t DutISense::getCurrentRange(void)	{
	if(activeRange==(&range0))
		return 0U;
	else if(activeRange==(&range1))
		return 1U;
	else if(activeRange==(&range2))
		return 2U;
	else if(activeRange==(&range3))
		return 3U;
	else
		return 0xFF;
}


/********************************************************************************************************************************
 * enableCurrentRange()																											*
 * Parameters: 	none																											*
  * Returns: nothing																											*
 *																																*
 * Switches adc input mux to the correct channel, starts conversion, updates all values in class, and then switches range		*
 * 	if necessary.																												*
 ********************************************************************************************************************************/
void DutISense::updateADCVal(void)	{
	ADC16_DRV_ConfigConvChn(dut_adc_IDX, ADC_CHNGROUP, activeADCChannel);		// Switch ADC channel
	rawADCVal = ADC16_DRV_GetConvValueRAW(dut_adc_IDX, ADC_CHNGROUP);			// Get new value
	floatADCVal.asFloat = (float)rawADCVal*(activeRange->scalingFactor);
#ifdef AUTOSWITCHING
	prevIRange = activeRange->rangeNum;
	switch(activeRange->rangeNum)	{
	case 3:
		if(rawADCVal<A_LOTHRESH)
			PRV_enableRange(&range2);
			break;
		case 2:
			if(rawADCVal>mA_HITHRESH)
				PRV_enableRange(&range3);
			else if(rawADCVal<mA_LOTHRESH)
				PRV_enableRange(&range1);
			break;
		case 1:
			if(rawADCVal>uA_HITHRESH)
				PRV_enableRange(&range2);
			else if(rawADCVal<uA_LOTHRESH)
				PRV_enableRange(&range0);
			break;
		case 0:
			if(rawADCVal>nA_HITHRESH)
				PRV_enableRange(&range1);
			break;
		default:
			break;
	}
#endif
}


/********************************************************************************************************************************
 * getADCValRaw()																												*
 * Parameters: 	none																											*
 * Returns: unformatted adc value as a 16-bit int																				* 																																*
 ********************************************************************************************************************************/
uint16_t DutISense::getADCValRaw(void)	{
	return rawADCVal;
}



/********************************************************************************************************************************
 * getADCValScaled()																											*
 * Parameters: 	none																											*
 * Returns: float value as a floatUnion_t (see floatUnion.h)																	* 																																*
 ********************************************************************************************************************************/
floatUnion_t DutISense::getADCValScaled(void)	{
	return floatADCVal;
}


/********************************************************************************************************************************
 * getPreviousIRange()																											*
 * Parameters: 	none																											*
 * Returns: previous current range																								* 																																*
 ********************************************************************************************************************************/
uint8_t DutISense::getPreviousIRange(void)	{
	return prevIRange;
}




/********************************************************************************************************************************
 * PRV_initCurrentRange(currentRange_t *cRange, uint32_t pinName, adc16_chn_config_t adcCfg, float shRes, uint8_t gain)			*
 * Parameters: 	cRange 	- Pointer to the current measurement channel that will be initialized									*
 *				pinName	- Enable pin (GPO) for current range																	*
 *				adcCfg	- ADC channel configuration																				*
 *				shRes	- Current shunt resistor value																			*
 *				gain	- Amplifier gain																						*
  * Returns: nothing																											*
 *																																*
 * Initializes a current range with all of the appropriate values.  These values should be hard coded in the object constructor	*
 ********************************************************************************************************************************/
void DutISense::PRV_initCurrentRange(currentRange_t *cRange, uint32_t pinName, adc16_chn_config_t adcCfg, float shRes, uint8_t gain, uint8_t rngNum)	{
	cRange->enPinName = pinName;
	cRange->shuntRes = shRes;
	cRange->ampGain = gain;
	cRange->adcChConfig = adcCfg;
	cRange->scalingFactor = 3.0/((float)0xFFFF*gain*shRes);
	cRange->rangeNum = rngNum;
}

/********************************************************************************************************************************
 * PRV_enableRange(currentRange_t *newRange)																					*
 * Parameter: newRange - pointer to the current measurement channel that will be enabled										*
 * Returns: nothing																												*
 *																																*
 * For a short period, both ranges will be active so that we don't disconnect the DUT from power								*
 * New and old enable pins will be set and cleared, respectively																*
 * The active ADC channel for the DUT current measurement will be updated, but not changed in hardware							*
 ********************************************************************************************************************************/
void DutISense::PRV_enableRange(currentRange_t *newRange)	{
	GPIO_DRV_SetPinOutput(newRange->enPinName);
	if(newRange!=activeRange)	{
		GPIO_DRV_ClearPinOutput(activeRange->enPinName);
		activeRange = newRange;	// Update activeRange
		activeADCChannel = &newRange->adcChConfig;
	}
}

/*
switch(activeRange->rangeNum)	{
	case 3:
		if(rawADCVal<A_LOTHRESH)	{
			if(outOfRangeCount==RNGSWITCHHYS)	{
				outOfRangeCount=0;
				PRV_enableRange(&range2);
			}
			else
				outOfRangeCount++;
		}
		break;
	case 2:
		if(rawADCVal>mA_HITHRESH)
			PRV_enableRange(&range3);
		else if(rawADCVal<mA_LOTHRESH)
			PRV_enableRange(&range1);
		break;
	case 1:
		if(rawADCVal>uA_HITHRESH)
			PRV_enableRange(&range2);
		else if(rawADCVal<uA_LOTHRESH)
			PRV_enableRange(&range0);
		break;
	case 0:
		if(rawADCVal>nA_HITHRESH)
			PRV_enableRange(&range2);
		break;
	default:
		break;



	switch(activeRange->rangeNum)	{
	case 3:
		if(rawADCVal<A_LOTHRESH)	{
			if(outOfRangeCount==RNGSWITCHHYS)	{
				outOfRangeCount=0;
				PRV_enableRange(&range2);
			}
			else
				outOfRangeCount++;
		}
		break;
	case 2:
		if(rawADCVal<mA_HITHRESH)	{
			if(outOfRangeCount==RNGSWITCHHYS)	{
				outOfRangeCount=0;
				PRV_enableRange(&range3);
			}
			else
				outOfRangeCount++;
			}
		if(rawADCVal<mA_LOTHRESH)	{
			if(outOfRangeCount==RNGSWITCHHYS)	{
				outOfRangeCount=0;
				PRV_enableRange(&range1);
			}
			else
				outOfRangeCount++;
			}
		break;
	case 1:
		if(rawADCVal<uA_HITHRESH)	{
			if(outOfRangeCount==RNGSWITCHHYS)	{
				outOfRangeCount=0;
				PRV_enableRange(&range2);
			}
			else
				outOfRangeCount++;
			}
		if(rawADCVal<uA_LOTHRESH)	{
			if(outOfRangeCount==RNGSWITCHHYS)	{
				outOfRangeCount=0;
				PRV_enableRange(&range0);
			}
			else
				outOfRangeCount++;
			}
		break;
	case 0:
		if(rawADCVal<nA_HITHRESH)	{
			if(outOfRangeCount==RNGSWITCHHYS)	{
				outOfRangeCount=0;
				PRV_enableRange(&range1);
			}
			else
				outOfRangeCount++;
			}
		break;
	default:
		outOfRangeCount=0;
		break;
	}
 */
