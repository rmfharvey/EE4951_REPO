/* ###################################################################
**     Filename    : Events.c
**     Project     : ee4951_prodmcu
**     Processor   : MK22FN512VLL12
**     Component   : Events
**     Version     : Driver 01.00
**     Compiler    : GNU C Compiler
**     Date/Time   : 2015-11-28, 12:40, # CodeGen: 0
**     Abstract    :
**         This is user's event module.
**         Put your event handler code here.
**     Settings    :
**     Contents    :
**         No public methods
**
** ###################################################################*/
/*!
** @file Events.c
** @version 01.00
** @brief
**         This is user's event module.
**         Put your event handler code here.
*/         
/*!
**  @addtogroup Events_module Events module documentation
**  @{
*/         
/* MODULE Events */

#include "Cpu.h"
#include "Events.h"
#include "DutISense.h"
#include "DutVSense.h"
#include "floatUnion.h"

#ifdef __cplusplus
extern "C" {
#endif


/* User includes (#include below this line is not maintained by Processor Expert) */

/*
** ===================================================================
**     Interrupt handler : ADC0_IRQHandler
**
**     Description :
**         User interrupt service routine. 
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/
void ADC0_IRQHandler(void)
{
  /* Write your code here ... */
}

/*
** ===================================================================
**     Callback    : PORTA_IRQHandler
**
**     Description :
**         User interrupt service routine.
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/
//void PORTA_IRQHandler(void)	{
	//PRINTF("PORTA Interrupt\n\r");
//}


/*
** ===================================================================
**     Callback    : adc_trigger_OnTimeOut
**     Description : This callback is called when the timer expires.
**     Parameters  :
**       data - User parameter for the callback function.
**     Returns : Nothing
**
**     Since we couldn't get the SD card working, the double bufferring and sending of data is really poorly implemented.  It was just something I cobbled together
**     as quickly as possible in order to validate the hardware.  See notes below.
** ===================================================================
*/
#define BUFFERSIZE	20000
void adc_trigger_OnTimeOut(void* data)		// See flowcharts in the repository for a full description
{
	static uint32_t timestamp;
	static uint16_t count=0;
	extern DutISense dutIsense;
	extern DutVSense dutVsense;
	static char buffer0[BUFFERSIZE] = {0};
	static char buffer1[BUFFERSIZE] = {0};
	static uint16_t bufferHead=0;
	uint8_t i;
	static uint8_t buffNum = 0;

	if(count&0b1)	{
		dutVsense.updateADCVal();	// Update voltage reading
		count++;

		uint16_t currInt = dutIsense.getADCValRaw();	// Get current value
		uint16_t voltInt = dutVsense.getADCValRaw();	// Get voltage value
		if(buffNum&0x0001)	{							// Check which buffer to use (could be implemented with a 2d array)
			buffer1[bufferHead++] = voltInt>>8;
			buffer1[bufferHead++] = voltInt&0xFF;
			buffer1[bufferHead++] = currInt>>8;
			buffer1[bufferHead++] = currInt&0xFF;
			buffer1[bufferHead++] = dutIsense.getPreviousIRange();
			buffer1[bufferHead++] = '\n';
			if(bufferHead>(BUFFERSIZE-7))	{
				//HWTIMER_SYS_Stop(&adc_trigger_Handle);
				PRINTF(&buffer1[0]);
				bufferHead=0;
				buffNum++;
			}
		}
		else	{
			buffer0[bufferHead++] = voltInt>>8;
			buffer0[bufferHead++] = voltInt&0xFF;
			buffer0[bufferHead++] = currInt>>8;
			buffer0[bufferHead++] = currInt&0xFF;
			buffer0[bufferHead++] = dutIsense.getPreviousIRange();
			buffer0[bufferHead++] = '\n';
			if(bufferHead>(BUFFERSIZE-7))	{
				//HWTIMER_SYS_Stop(&adc_trigger_Handle);
				PRINTF(&buffer0[0]);
				bufferHead=0;
				buffNum++;
			}
		}
	}
	else	{
		dutIsense.updateADCVal();
		count++;
	}
}

/*
** ===================================================================
**     Interrupt handler : ADC1_IRQHandler
**
**     Description :
**         User interrupt service routine. 
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/
void ADC1_IRQHandler(void)
{
  /* Write your code here ... */
}






/* END Events */

#ifdef __cplusplus
}  /* extern "C" */
#endif

/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.5 [05.21]
**     for the Freescale Kinetis series of microcontrollers.
**
** ###################################################################
*/
