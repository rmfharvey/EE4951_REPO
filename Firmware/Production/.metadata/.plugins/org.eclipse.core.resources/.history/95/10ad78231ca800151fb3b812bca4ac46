/* ###################################################################
**     Filename    : main.c
**     Project     : ee4951_prodmcu
**     Processor   : MK22FN512VLL12
**     Version     : Driver 01.01
**     Compiler    : GNU C Compiler
**     Date/Time   : 2015-11-28, 12:49, # CodeGen: 3
**     Abstract    :
**         Main module.
**         This module contains user's application code.
**     Settings    :
**     Contents    :
**         No public methods
**
** ###################################################################*/
/*!
** @file main.c
** @version 01.01
** @brief
**         Main module.
**         This module contains user's application code.
*/         
/*!
**  @addtogroup main_module main module documentation
**  @{
*/         
/* MODULE main */


/* Including needed modules to compile this module/procedure */
#include "Cpu.h"
#include "Events.h"
#include "clockMan1.h"
#include "pin_mux.h"
#include "op_sys.h"
#include "WAIT1.h"
#include "adc_trigger.h"
#include "dut_gpio.h"
#include "dut_adc.h"
#include "opt_bits.h"
#include "testgpio.h"
#include "DbgCs1.h"
#include "self_adc.h"
#if CPU_INIT_CONFIG
  #include "Init_Config.h"
#endif
/* User includes (#include below this line is not maintained by Processor Expert) */
#include "system_timer.h"
#include "DutISense.h"
#include "DutVSense.h"
#include "floatUnion.h"


//TODO Self Monitor: Test ADCs
//TODO Timestamp and packet construction
//TODO Test interrupt driven Vsense and Isense switching

/* Global Variables */
//sysTimer_t timer;
uint8_t	startupOptions;
DutISense dutIsense;
DutVSense dutVsense;


void cycleRanges(DutISense *dutI, uint16_t delay)	{	// Cycles through current ranges.  Just used for checking hardware on startup.
	dutI->enableCurrentRange(nA);
	WAIT1_Waitms(delay);
	dutI->enableCurrentRange(uA);
	WAIT1_Waitms(delay);
	dutI->enableCurrentRange(mA);
	WAIT1_Waitms(delay);
	dutI->enableCurrentRange(A);
	WAIT1_Waitms(delay);
}


uint8_t getStartupOptions()	{	// Checks the dipswitch to get user configured options.
	uint8_t temp = 0;
	if(GPIO_DRV_ReadPinInput(opt3))
		temp++;
	temp <<= 1;
	if(GPIO_DRV_ReadPinInput(opt2))
		temp++;
	temp <<= 1;
	if(GPIO_DRV_ReadPinInput(opt1))
		temp++;
	temp <<= 1;
	if(GPIO_DRV_ReadPinInput(opt0))
		temp++;
	return temp;
}


/* Deprecated in production */
void setIRangeFromStartup(void)	{
	uint8_t range = getStartupOptions();
	iRange_t curRange;

	switch(range)	{
	case 0:
		curRange=nA;
		break;
	case 1:
		curRange=uA;
		break;
	case 2:
		curRange=mA;
		break;
	case 3:
		curRange=A;
		break;
	default:
		curRange=A;
		break;
	}
	dutIsense.enableCurrentRange(curRange);
}


// User initialization stuff.
void userInit(void)	{
	PRINTF("\n\n\rEE4951W Battery Power Monitor\r\n"
			"Firmware Rev. A\r\n"
			"Ross Harvey\n\n\r");

	PRINTF("Core Clock:\t%d MHz\n\rSystem Clock:\t%d MHz\n\rBus Clock:\t%d MHz\n\rSysTick:\t%d MHz\n\n\r",
			CLOCK_SYS_GetCoreClockFreq()/1000000,
			CLOCK_SYS_GetSystemClockFreq()/1000000,
			CLOCK_SYS_GetBusClockFreq()/1000000,
			CLOCK_SYS_GetSystickFreq()/1000000);

	/* Set initial current range */
	dutIsense.enableCurrentRange(A);
	WAIT1_Waitms(1);

	/* Startup options */
	startupOptions = getStartupOptions();
	PRINTF("Startup Options: %04b\n\n\r",startupOptions);
	//setIRangeFromStartup(startupOptions);

	/* Start ADC Trigger Timer	*/
	PRINTF("Starting ADC Trigger: ");
	if(HWTIMER_SYS_Start(&adc_trigger_Handle)==kHwtimerSuccess)	{
		PRINTF("Success\n\r");
	}
	else	{
		PRINTF("Failed\n\r");
	}

	PRINTF("\n\r");
}



/*lint -save  -e970 Disable MISRA rule (6.3) checking. */
int main(void)
/*lint -restore Enable MISRA rule (6.3) checking. */
{
  /* Write your local variable definition here */


  /*** Processor Expert internal initialization. DON'T REMOVE THIS CODE!!! ***/
  PE_low_level_init();
  /*** End of Processor Expert internal initialization.                    ***/

  /* Write your code here */
  /* For example: for(;;) { } */
  userInit();

  uint8_t i=0;
  while(true)	{
	  i++;
  }





  /*** Don't write any code pass this line, or it will be deleted during code generation. ***/
  /*** RTOS startup code. Macro PEX_RTOS_START is defined by the RTOS component. DON'T MODIFY THIS CODE!!! ***/
  #ifdef PEX_RTOS_START
    PEX_RTOS_START();                  /* Startup of the selected RTOS. Macro is defined by the RTOS component. */
  #endif
  /*** End of RTOS startup code.  ***/
  /*** Processor Expert end of main routine. DON'T MODIFY THIS CODE!!! ***/
  for(;;){}
  /*** Processor Expert end of main routine. DON'T WRITE CODE BELOW!!! ***/
} /*** End of main routine. DO NOT MODIFY THIS TEXT!!! ***/

/* END main */
/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.5 [05.21]
**     for the Freescale Kinetis series of microcontrollers.
**
** ###################################################################
*/
