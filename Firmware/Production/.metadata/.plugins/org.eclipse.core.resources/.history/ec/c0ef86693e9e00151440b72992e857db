/* ###################################################################
**     Filename    : main.c
**     Project     : spitest
**     Processor   : MK22FN512VLL12
**     Version     : Driver 01.01
**     Compiler    : GNU C Compiler
**     Date/Time   : 2015-12-07, 19:25, # CodeGen: 0
**     Abstract    :
**         Main module.
**         This module contains user's application code.
**     Settings    :
**     Contents    :
**         No public methods
**
** ###################################################################*/
/*!
** @file main.c
** @version 01.01
** @brief
**         Main module.
**         This module contains user's application code.
*/         
/*!
**  @addtogroup main_module main module documentation
**  @{
*/         
/* MODULE main */


/* Including needed modules to compile this module/procedure */
#include "Cpu.h"
#include "Events.h"
#include "clockMan1.h"
#include "pin_mux.h"
#include "osa1.h"
#include "sd_spi.h"
#include "WAIT1.h"
#include "debug_console.h"
#include "sd_gpio.h"
#if CPU_INIT_CONFIG
  #include "Init_Config.h"
#endif
/* User includes (#include below this line is not maintained by Processor Expert) */
#include "SDCard.h"
#include <stdbool.h>

#define CMD0	0U
#define CMD1	1U
#define CMD16	16U
#define CMD58	58U

uint8_t sendByte(uint8_t byte)	{
	uint8_t rcv;
	DSPI_DRV_MasterTransferBlocking(sd_spi_IDX, &sd_spi_BusConfig0, (uint8_t *)byte, &rcv, 1, 0xFFFFFFFF);
}

void sendCMD(uint8_t cmd, uint32_t arg, uint8_t arrRet[6])	{
	uint8_t arr[6] = {0x40^(cmd&0x3F), (uint8_t)(arg>>24), (uint8_t)(arg>>16), (uint8_t)(arg>>8), (uint8_t)(arg), 0x95};
	DSPI_DRV_MasterTransferBlocking(sd_spi_IDX, &sd_spi_BusConfig0, arr, arrRet, 6, 0xFFFFFFFF);
}

uint8_t checkArray(uint8_t arr[6], uint8_t target)	{
	if(arr[0]==target)
		return 1;
	else if(arr[1]==target)
		return 1;
	else if(arr[2]==target)
		return 1;
	else if(arr[3]==target)
		return 1;
	else if(arr[4]==target)
		return 1;
	else if(arr[4]==target)
		return 1;
	else
		return 0;
}

uint8_t initSDCard(void)	{
	uint8_t spiArr[10] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
	uint8_t resetArr[6] = {0x40, 0x00, 0x00, 0x00, 0x00, 0x95};
	uint8_t initArr[6] = {0x41, 0x00, 0x00, 0x00, 0x00, 0x95};
	uint8_t idleArr[6] = {0x7A, 0x00, 0x00, 0x00, 0x00, 0x95};
	uint8_t sectorSizeArr[6] = {0x40^16, 0x00,  0x00,  0x02,  0x00,  0x95};
	uint8_t arrRx[16] = {0x00};

	// Set Idle
	GPIO_DRV_SetPinOutput(SD_nCS);
	DSPI_DRV_MasterTransferBlocking(sd_spi_IDX, &sd_spi_BusConfig0, spiArr, &arrRx[0], 10, 0xFFFFFFFF);

	GPIO_DRV_ClearPinOutput(SD_nCS);
	//DSPI_DRV_MasterTransferBlocking(sd_spi_IDX, &sd_spi_BusConfig0, resetArr, &arrRx[0], 6, 0xFFFFFFFF);
	uint8_t respArr[6] = {0x00};

	uint8_t arr6[6];
	&arr6 = sendCMD(CMD0,0);

	// Send until response is validated
	while(arrRx[0]!=0x01)	{
		//GPIO_DRV_ClearPinOutput(SD_nCS);
		DSPI_DRV_MasterTransferBlocking(sd_spi_IDX, &sd_spi_BusConfig0, &spiArr[0], &arrRx[0], 1, 0xFFFFFFFF);
		//GPIO_DRV_SetPinOutput(SD_nCS);
	}
	PRINTF("SD Card Reset\n\r");

	// Read OCR (CMD58)
	//DSPI_DRV_MasterTransferBlocking(sd_spi_IDX, &sd_spi_BusConfig0, initArr, &arrRx[0], 6, 0xFFFFFFFF);
	sendCMD(CMD1, 0);
	DSPI_DRV_MasterTransferBlocking(sd_spi_IDX, &sd_spi_BusConfig0, &spiArr[0], &arrRx[0], 2, 0xFFFFFFFF);
	//GPIO_DRV_ClearPinOutput(SD_nCS);
	//DSPI_DRV_MasterTransferBlocking(sd_spi_IDX, &sd_spi_BusConfig0, idleArr, &arrRx[0], 6, 0xFFFFFFFF);
	//sendCMD(CMD58, 0);
	//GPIO_DRV_SetPinOutput(SD_nCS);
	while(arrRx[0]!=0x00)	{
		arrRx[0] = sendCMD(CMD58, 0);
	}
	PRINTF("SD Card ready\n\r");

	//DSPI_DRV_MasterTransferBlocking(sd_spi_IDX, &sd_spi_BusConfig0, sectorSizeArr, &arrRx[0], 6, 0xFFFFFFFF);
	sendCMD(CMD16, 512);
	PRINTF("Sector Size Set\n\r");

	DSPI_DRV_MasterTransferBlocking(sd_spi_IDX, &sd_spi_BusConfig0, spiArr, &arrRx[0], 2, 0xFFFFFFFF);

	return 1;
}

void writeBlock(void)	{
	uint8_t wArr[512];
	uint16_t i;
	for(i=0; i<512; i++){
		wArr[i]=i;
	}

	uint8_t ffArr[512];
	for(i=0; i<512; i++){
		ffArr[i]=i;
	}

	uint8_t arrReceive[512] = {0x00};
	uint8_t startToken = 0xFE;



	uint8_t cmd24[6] = {0x58, 0x00, 0x00, 0x00, 0x01, 0xFF};
	// Send CMD24
	//DSPI_DRV_MasterTransferBlocking(sd_spi_IDX, &sd_spi_BusConfig0, ffArr, arrReceive, 2, 0xFFFFFFFF);	// Clear responses
	DSPI_DRV_MasterTransferBlocking(sd_spi_IDX, &sd_spi_BusConfig0, cmd24, arrReceive, 6, 0xFFFFFFFF);		// Send CMD24
	while(arrReceive[0]!=0x05)
		DSPI_DRV_MasterTransferBlocking(sd_spi_IDX, &sd_spi_BusConfig0, ffArr, &arrReceive[0], 1, 0xFFFFFFFF);	// Check Response
	DSPI_DRV_MasterTransferBlocking(sd_spi_IDX, &sd_spi_BusConfig0, &startToken, arrReceive, 1, 0xFFFFFFFF);		// Start token
	DSPI_DRV_MasterTransferBlocking(sd_spi_IDX, &sd_spi_BusConfig0, wArr, arrReceive, 512, 0xFFFFFFFF);		// Send data

	DSPI_DRV_MasterTransferBlocking(sd_spi_IDX, &sd_spi_BusConfig0, ffArr, arrReceive, 512, 0xFFFFFFFF);		// Check Response
}






/*lint -save  -e970 Disable MISRA rule (6.3) checking. */
int main(void)
/*lint -restore Enable MISRA rule (6.3) checking. */
{
  /* Write your local variable definition here */
	//SDCard sd;
  /*** Processor Expert internal initialization. DON'T REMOVE THIS CODE!!! ***/
  PE_low_level_init();
  /*** End of Processor Expert internal initialization.                    ***/

  /* Write your code here */
  /* For example: for(;;) { } */



#define SIZE	10
/*  uint32_t i=0;
  uint8_t arrTx[SIZE];
  uint8_t arrRx[SIZE];
  for(i=0; i<SIZE; i++){
	  arrTx[i] = 0xFF;
  }
*/
  PRINTF("\n\n\r");
  WAIT1_Waitms(2000);
  uint8_t sdActive = 0;
  while(1)	{
	  while(!sdActive)	{
		  sdActive = initSDCard();
		  writeBlock();
	  }
	  // SD Card is initialized



  }










  /*** Don't write any code pass this line, or it will be deleted during code generation. ***/
  /*** RTOS startup code. Macro PEX_RTOS_START is defined by the RTOS component. DON'T MODIFY THIS CODE!!! ***/
  #ifdef PEX_RTOS_START
    PEX_RTOS_START();                  /* Startup of the selected RTOS. Macro is defined by the RTOS component. */
  #endif
  /*** End of RTOS startup code.  ***/
  /*** Processor Expert end of main routine. DON'T MODIFY THIS CODE!!! ***/
  for(;;){}
  /*** Processor Expert end of main routine. DON'T WRITE CODE BELOW!!! ***/
} /*** End of main routine. DO NOT MODIFY THIS TEXT!!! ***/

/* END main */
/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.5 [05.21]
**     for the Freescale Kinetis series of microcontrollers.
**
** ###################################################################
*/
