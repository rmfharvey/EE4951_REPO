/** ###################################################################
**     This component module is generated by Processor Expert. Do not modify it.
**     Filename    : spi_dspi_layer.c
**     Project     : sdCardTest
**     Processor   : MK22FN512VLL12
**     Version     : Component 1.3.0, Driver 01.00, CPU db: 3.00.000
**     Repository  : KSDK 1.3.0
**     Compiler    : GNU C Compiler
**     Date/Time   : 2015-12-11, 18:12, # CodeGen: 1
**
**     Copyright : 1997 - 2015 Freescale Semiconductor, Inc. 
**     All Rights Reserved.
**     
**     Redistribution and use in source and binary forms, with or without modification,
**     are permitted provided that the following conditions are met:
**     
**     o Redistributions of source code must retain the above copyright notice, this list
**       of conditions and the following disclaimer.
**     
**     o Redistributions in binary form must reproduce the above copyright notice, this
**       list of conditions and the following disclaimer in the documentation and/or
**       other materials provided with the distribution.
**     
**     o Neither the name of Freescale Semiconductor, Inc. nor the names of its
**       contributors may be used to endorse or promote products derived from this
**       software without specific prior written permission.
**     
**     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
**     ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
**     WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
**     DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
**     ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
**     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
**     LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
**     ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
**     (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
**     SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
**     
**     http: www.freescale.com
**     mail: support@freescale.com
** ###################################################################*/
/*!
** @file spi_dspi_layer.c                                                  
** @version 01.00
*/         
/*!
**  @addtogroup spi_dspi_layer_module spi_dspi_layer module documentation
**  @{
*/         
#include "Cpu.h"
#include "fsl_dspi_hal.h"
#include "fsl_dspi1.h"
/* Content of spi_dspi_layer.c file is accessible only if static SDK file fsl_sdcard_spi.h is included in project.
 * This situation will occure only if fsl_spi or fsl_dspi component is selected as inherited component in related
 * property in fsl_sdcard component. Once fsl_sdcard component will be removed or disabled, file fsl_sdcard_spi.h 
 * will not be included and macro __FSL_SDCARD_SPI_H__ will not be defined, then content of this file will be ignored.
 */
#ifdef __FSL_SDCARD_SPI_H__

/* ********************************************************************* 
 * Declarations
 * *********************************************************************/
uint32_t GetSpiMaxFrequency(sdspi_spi_t *spi);
uint32_t SetSpiFrequency(sdspi_spi_t *spi, uint32_t frequency);
uint32_t spiExchange(sdspi_spi_t *spi, const uint8_t *in, uint8_t *out, uint32_t size);
uint8_t spiSendWord(sdspi_spi_t *spi, uint8_t word);
      
/* ********************************************************************* 
 * Structures
 * *********************************************************************/
/*! Structure containing pointers to API layer between SDCARD and SPI/DSPI components */
sdspi_ops_t ops_layer = {
   .getMaxFrequency = &GetSpiMaxFrequency,
   .setFrequency = &SetSpiFrequency,
   .exchange = &spiExchange,
   .sendWord = &spiSendWord,
};  
      
/* ********************************************************************* 
 * Definitions
 * *********************************************************************/
/** 
 * Function returns value of SPIx/DSPI source clock
 */
uint32_t GetSpiMaxFrequency(sdspi_spi_t *spi)
{   
   return(spi->busBaudRate);
}
   
/** 
 * Function sets required speed of SPIx/DSPI
 */
uint32_t SetSpiFrequency(sdspi_spi_t *spi, uint32_t frequency)
{
    uint32_t calculatedBaudRate = 0x00;
      
    /* User Code: Calling of the SPI/DSPI method that provides setting of SPI/DSPI transfer speed */
      
    if (calculatedBaudRate == 0x00)
    {
        return 0x01;
    }
    return 0x00;
}
      
/** 
 * Function performs transmission of the input data buffer via SPIx/DSPI
 */
uint32_t spiExchange(sdspi_spi_t *spi, const uint8_t *in, uint8_t *out, uint32_t size)
{
    uint8_t result = 0x00;
      
    /* User Code: Calling of the SPI/DSPI method that provides blocking transfer over SPI/DSPI */
    while(result!=0x00)	{
    	DSPI_DRV_MasterTransferBlocking(fsl_dspi1_IDX, &fsl_dspi1_BusConfig0, in, &result, 1, 0xFFFF);
    }

    return result;
}
      
/** 
 * Function performs transmission of the input byte
 */
uint8_t spiSendWord(sdspi_spi_t *spi, uint8_t word)
{
    uint8_t result = 0x00;
      
    /* User Code: Calling of the SPI/DSPI method that provides blocking transfer of 1B over SPI/DSPI */
    while(result!=0x00)	{
    	DSPI_DRV_MasterTransferBlocking(fsl_dspi1_IDX, &fsl_dspi1_BusConfig0, &word, &result, 1, 0xFFFF);
    }

    return result;
}
#endif
 
